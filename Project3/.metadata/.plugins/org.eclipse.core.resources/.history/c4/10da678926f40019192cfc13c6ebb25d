package com.revdoc.dao;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.revdoc.model.Doctor;

@Repository
public interface DoctorDAO  extends JpaRepository<Doctor, Long>{
	@Query("select d from Doctor d where d.npi = :npi")
	Doctor findByNpi(long npi);
	
	@Query("delete Doctor d  where d.npi = :npi")
	Doctor deleteByNpi(long npi);
	
//	@Query("select Doctor.doctor_name, Doctor.experience, Doctor.email, Doctor.password, Doctor.phone, Doctor.about_me, "
//			+ "Location.location_name, Location.address, Location.city, Location.state, Location.zip, Location.location_type_name, "
//			+ "License.license_name, Doctor_license.license_date, "
//			+ "Specialty_type.specialty_name, Condition_type.condition_name, "
//			+ "Insurance_type.insurance_name "
//			+ "from Doctor where Doctor.npi = :npi "
//			+ "join Location on Doctor.location_id = Location.location_id "
//			+ "join Doctor_license on Doctor.npi = Doctor_license.npi "
//			+ "join License on Doctor_license.license_id = License.license_id "
//			+ "join Specialty on Doctor.npi = Specialty.npi "
//			+ "join Specialty_type on Specialty.specialty_type_id = Specialty_type.specialty_type_id "
//			+ "join Conditions on Doctor.npi = Conditions.npi "
//			+ "join Condition_type on Conditions.condition_type_id = Condition_type.condition_type_id "
//			+ "join Insurance on Doctor.npi = Insurance.npi "
//			+ "join Insurance_type on Insurance.insurance_type_id = Insurance_type.insurance_type_id")
	//@Query("select d from Doctor d where d.npi = :npi ")
	
//	@Query("select "
//	+ "License.license_name, Doctor_license.license_date, "
//	+ "from Doctor where Doctor.npi = :npi "
//	+ "join Doctor_license on Doctor.npi = Doctor_license.npi "
//	+ "join License on Doctor_license.license_id = License.license_id "
//	+ "join Specialty on Doctor.npi = Specialty.npi "
//	+ "join Specialty_type on Specialty.specialty_type_id = Specialty_type.specialty_type_id "
//	+ "join Conditions on Doctor.npi = Conditions.npi "
//	+ "join Condition_type on Conditions.condition_type_id = Condition_type.condition_type_id "
//	+ "join Insurance on Doctor.npi = Insurance.npi "
//	+ "join Insurance_type on Insurance.insurance_type_id = Insurance_type.insurance_type_id")
//@Query("select d from Doctor d where d.npi = :npi ")
	
	@Query(value="select Doctor.npi, Doctor.doctor_name, Doctor.phone, Doctor.about_me, "
            + "Doctor.email, Location.location_name, Location.location_type_name, Location.address, "
			+ "Location.city, Location.state, Location.zip, Doctor.experience, "
            + "License.license_name, "
            + "Specialty_type.specialty_name, Condition_type.condition_name, "
            + "insurance_type.insurance_name, "
            + "GROUP_CONCAT (DISTINCT(License.license_name)  SEPARATOR ' ; '), "
            + "GROUP_CONCAT (DISTINCT(Specialty_type.specialty_name)  SEPARATOR ' ; '), "
            + "GROUP_CONCAT (DISTINCT(insurance_type.insurance_name)  SEPARATOR ' ; '), "
            + "GROUP_CONCAT (DISTINCT(Condition_type.condition_name)  SEPARATOR ' ; ') "
            + "from Doctor "
            + "join Location on Doctor.location_location_id=Location.location_id "
            + "join doctor_license on Doctor.npi = doctor_license.doctor_npi "
        	+ "join License on doctor_license.license_license_id = License.license_id "
            + "join Insurance on Doctor.npi=Insurance.doctor_npi "
            + "join insurance_type on Insurance.insurance_type_insurance_type_id = insurance_type.insurance_type_id "
            + "join Specialty on Doctor.npi=Specialty.doctor_npi "
            + "join Specialty_type on Specialty.specialty_type_specialty_type_id=specialty_type.specialty_type_id "
            + "join conditions on Doctor.npi = conditions.doctor_npi "
            + "join Condition_type on conditions.condition_type_condition_type_id = Condition_type.condition_type_id "
            + "where (npi like :npi) "
            + "group by Doctor.npi", nativeQuery = true)
    List<Object[]> findDoctorProfileByNpi(long npi);	
}
